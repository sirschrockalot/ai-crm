name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  NPM_VERSION: '9'
  TERRAFORM_VERSION: '1.5.0'

jobs:
  # Lint and Type Check
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint backend
        run: npm run lint:backend

      - name: Lint frontend
        run: npm run lint:frontend

      - name: Lint mobile
        run: npm run lint:mobile

      - name: Type check backend
        run: npm run type-check:backend

      - name: Type check frontend
        run: npm run type-check:frontend

  # Infrastructure Validation
  infrastructure-validation:
    name: Infrastructure Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup Google Cloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Terraform Format Check
        run: |
          cd infrastructure/terraform
          terraform fmt -check -recursive

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd infrastructure/terraform
          terraform plan -var-file=environments/${{ github.ref_name == 'main' && 'production' || 'development' }}.tfvars

      - name: Terraform Validate
        run: |
          cd infrastructure/terraform
          terraform validate

  # Test Backend
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      vault:
        image: vault:1.15
        ports:
          - 8200:8200
        env:
          VAULT_DEV_ROOT_TOKEN_ID: test-token
          VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
        options: >-
          --health-cmd "vault status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run backend tests
        run: npm run test:backend
        env:
          MONGODB_URI: mongodb://localhost:27017/test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret
          VAULT_ADDR: http://localhost:8200
          VAULT_TOKEN: test-token

      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          file: src/backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Test Frontend
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run frontend tests
        run: npm run test:frontend

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          file: src/frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Test Mobile
  test-mobile:
    name: Test Mobile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run mobile tests
        run: npm run test:mobile

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run OWASP ZAP security scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'http://localhost:3001'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  # Build
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test-backend, test-frontend, test-mobile]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build backend
        run: npm run build:backend

      - name: Build frontend
        run: npm run build:frontend

      - name: Build mobile
        run: npm run build:mobile

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            src/backend/dist/
            src/frontend/.next/
            src/mobile/dist/

  # Docker Build
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker-compose.yml
          push: false
          tags: dealcycle-crm:latest

  # Infrastructure Deployment (Staging)
  deploy-infrastructure-staging:
    name: Deploy Infrastructure (Staging)
    runs-on: ubuntu-latest
    needs: [infrastructure-validation, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup Google Cloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Deploy Infrastructure
        run: |
          cd infrastructure/terraform
          terraform init
          terraform apply -var-file=environments/staging.tfvars -auto-approve

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials dealcycle-cluster --region us-central1 --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy Applications
        run: |
          kubectl apply -f infrastructure/kubernetes/

  # Infrastructure Deployment (Production)
  deploy-infrastructure-production:
    name: Deploy Infrastructure (Production)
    runs-on: ubuntu-latest
    needs: [infrastructure-validation, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup Google Cloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Deploy Infrastructure
        run: |
          cd infrastructure/terraform
          terraform init
          terraform apply -var-file=environments/production.tfvars -auto-approve

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials dealcycle-cluster --region us-central1 --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy Applications
        run: |
          kubectl apply -f infrastructure/kubernetes/

  # Application Deployment (Staging)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build, deploy-infrastructure-staging]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Google Cloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials dealcycle-cluster --region us-central1 --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to staging
        run: |
          # Deploy backend
          kubectl set image deployment/dealcycle-backend backend=dealcycle-crm:latest -n dealcycle-crm
          
          # Deploy frontend
          kubectl set image deployment/dealcycle-frontend frontend=dealcycle-crm:latest -n dealcycle-crm
          
          # Wait for deployment
          kubectl rollout status deployment/dealcycle-backend -n dealcycle-crm
          kubectl rollout status deployment/dealcycle-frontend -n dealcycle-crm

  # Application Deployment (Production)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, deploy-infrastructure-production]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Google Cloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials dealcycle-cluster --region us-central1 --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to production
        run: |
          # Deploy backend
          kubectl set image deployment/dealcycle-backend backend=dealcycle-crm:latest -n dealcycle-crm
          
          # Deploy frontend
          kubectl set image deployment/dealcycle-frontend frontend=dealcycle-crm:latest -n dealcycle-crm
          
          # Wait for deployment
          kubectl rollout status deployment/dealcycle-backend -n dealcycle-crm
          kubectl rollout status deployment/dealcycle-frontend -n dealcycle-crm

  # Post-Deployment Verification
  post-deployment-verification:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Google Cloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials dealcycle-cluster --region us-central1 --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Run smoke tests
        run: |
          # Test backend health
          kubectl exec -n dealcycle-crm deployment/dealcycle-backend -- curl -f http://localhost:3000/health
          
          # Test frontend health
          kubectl exec -n dealcycle-crm deployment/dealcycle-frontend -- curl -f http://localhost:3001/api/health

      - name: Check deployment status
        run: |
          kubectl get pods -n dealcycle-crm
          kubectl get services -n dealcycle-crm
          kubectl get ingress -n dealcycle-crm 