version: '3.8'

services:
  # HashiCorp Vault for Secrets Management
  vault:
    image: vault:1.15
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=dealcycle-dev-token
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    volumes:
      - vault_data:/vault/data
      - ./infrastructure/secrets/vault-config.hcl:/vault/config/vault.hcl:ro
    cap_add:
      - IPC_LOCK
    networks:
      - dealcycle-network
    profiles:
      - production

  # Backend API
  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=${VAULT_TOKEN:-dealcycle-dev-token}
    env_file:
      - .env
    volumes:
      - ./src/backend:/app
      - /app/node_modules
    depends_on:
      - mongo
      - redis
    networks:
      - dealcycle-network

  # Frontend Application
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3000
      - NEXT_PUBLIC_APP_NAME=DealCycle CRM
    env_file:
      - .env
    volumes:
      - ./src/frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - dealcycle-network

  # Mobile Development Server
  mobile:
    build:
      context: ./src/mobile
      dockerfile: Dockerfile
    ports:
      - "19000:19000"
      - "19001:19001"
      - "19002:19002"
    environment:
      - NODE_ENV=development
      - EXPO_DEVTOOLS_LISTEN_ADDRESS=0.0.0.0
    env_file:
      - .env
    volumes:
      - ./src/mobile:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - dealcycle-network

  # MongoDB Database
  mongo:
    image: mongo:6.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=dealcycle
    volumes:
      - mongo_data:/data/db
      - ./src/backend/scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - dealcycle-network
    # Security: Only expose to internal network
    expose:
      - "27017"

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    networks:
      - dealcycle-network
    # Security: Only expose to internal network
    expose:
      - "6379"

  # Meilisearch for Search
  meilisearch:
    image: getmeili/meilisearch:v1.3
    ports:
      - "7700:7700"
    environment:
      - MEILI_MASTER_KEY=${MEILISEARCH_MASTER_KEY:-your-master-key}
    volumes:
      - meili_data:/meili_data
    networks:
      - dealcycle-network
    # Security: Only expose to internal network
    expose:
      - "7700"

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - dealcycle-network
    # Security: Only expose to internal network
    expose:
      - "9090"

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:10.0.0
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - dealcycle-network
    # Security: Only expose to internal network
    expose:
      - "3000"

  # Nginx for Load Balancing (Production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - dealcycle-network
    profiles:
      - production

  # ELK Stack for Centralized Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - dealcycle-network
    profiles:
      - production
    expose:
      - "9200"

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./monitoring/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
    networks:
      - dealcycle-network
    profiles:
      - production
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - dealcycle-network
    profiles:
      - production
    expose:
      - "5601"

volumes:
  mongo_data:
  redis_data:
  meili_data:
  prometheus_data:
  grafana_data:
  vault_data:
  elasticsearch_data:

networks:
  dealcycle-network:
    driver: bridge 